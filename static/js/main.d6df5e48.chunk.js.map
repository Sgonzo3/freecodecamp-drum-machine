{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","DrumBox","props","state","padList","drumList","otherList","className","this","map","drum","index","key","id","src","React","Component","DrumPad","handleClick","e","document","getElementById","innerHTML","play","onClick","App","tabIndex","onKeyPress","preventDefault","toUpperCase","href","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAAAA,EAAOC,QAAU,IAA0B,kC,qJCkCrCC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,QAAS,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAE1CC,SAAU,CACR,2DACA,2DACA,2DACA,6DACA,2DACA,yDACA,6DACA,6DACA,0DAEFC,UAAW,CACT,0DACA,0DACA,0DACA,kEACA,0DACA,yDACA,gEACA,+DACA,4DAzBa,E,sEA6BT,IAAD,OACP,OACE,6BACEC,UAAU,YAGRC,KAAKL,MAAMC,QAAQK,KAAK,SAACC,EAAMC,GAC7B,OAAO,kBAAC,EAAD,CACLC,IAAKF,EACLG,GAAE,eAAWF,GACbD,KAAMA,EACNC,MAAOA,EACPG,IAAK,EAAKX,MAAME,SAASM,a,GA1CjBI,IAAMC,WAmDtBC,E,YACJ,WAAYf,GAAQ,IAAD,8BACjB,4CAAMA,KAGRgB,YAAc,SAACC,GACbC,SAASC,eAAe,WAAWC,UAAnC,cAAsD,EAAKpB,MAAMQ,KAAjE,SACAU,SAASC,eAAe,EAAKnB,MAAMQ,MAAMa,QAJzC,EAAKpB,MAAQ,GAFI,E,sEASjB,OACE,4BACEI,UAAU,WACVM,GAAIL,KAAKN,MAAMW,GACfW,QAAShB,KAAKU,aAEbV,KAAKN,MAAMQ,KACZ,2BAAOG,GAAIL,KAAKN,MAAMQ,KAAMH,UAAU,OAAOO,IAAKN,KAAKN,MAAMY,W,GAjB/CC,IAAMC,WAsBbS,EAvGf,WASE,OACE,yBACElB,UAAU,MACVM,GAAG,eACHa,SAAS,IACTC,WAbJ,SAAwBR,GACtBA,EAAES,eAAeT,GACdC,SAASC,eAAeF,EAAEP,IAAIiB,iBAC/BT,SAASC,eAAe,WAAWC,UAAnC,cAAsDH,EAAEP,IAAIiB,cAA5D,SACAT,SAASC,eAAeF,EAAEP,IAAIiB,eAAeN,UAW7C,4BAAQhB,UAAU,cAChB,6CAEF,8BACE,6BAASM,GAAG,WACV,gDAEF,kBAAC,EAAD,OAEF,gCAAQ,yCAAc,uBAAGiB,KAAK,IAAR,uBCjBRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASC,eAAe,SD2H3C,kBAAmBiB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d6df5e48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  function handleKeyPress(e) {\n    e.preventDefault(e);\n    if(document.getElementById(e.key.toUpperCase()) ){\n      document.getElementById(\"display\").innerHTML = `<h2>${e.key.toUpperCase()}</h2>`;\n      document.getElementById(e.key.toUpperCase()).play();\n    }\n  }\n\n  return (\n    <div\n      className=\"App\"\n      id=\"drum-machine\"\n      tabIndex=\"1\"\n      onKeyPress={handleKeyPress}\n      >\n      <header className=\"App-header\">\n        <h1>Drum Machine</h1>\n      </header>\n      <main>\n        <article id=\"display\">\n          <h2>Hit a Drum Pad!</h2>\n        </article>\n        <DrumBox/>\n      </main>\n      <footer><span>Made by <a href=\"\">Santos Gonzalez</a></span></footer>\n    </div>\n  );\n}\n\nclass DrumBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      padList: [\"Q\",\"W\",\"E\",\"A\",\"S\",\"D\",\"Z\",\"X\",\"C\"],\n      // drum files from https://codepen.io/freeCodeCamp/pen/MJyNMd\n      drumList: [\n        'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n      ],\n      otherList: [\n        'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3',\n        'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\n      ]\n    };\n  }\n  render() {\n    return(\n      <section\n        className=\"drum-box\"\n        >\n        {\n          this.state.padList.map( (drum, index) => {\n            return <DrumPad\n              key={drum}\n              id= {`drum ${index}`}\n              drum={drum}\n              index={index}\n              src={this.state.drumList[index]}\n              />\n          })\n        }\n      </section>\n    )\n  }\n}\n\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  handleClick = (e) => {\n    document.getElementById(\"display\").innerHTML = `<h2>${this.props.drum}</h2>`;\n    document.getElementById(this.props.drum).play();\n  }\n  render() {\n    return (\n      <button\n        className=\"drum-pad\"\n        id={this.props.id}\n        onClick={this.handleClick}\n        >\n        {this.props.drum}\n        <audio id={this.props.drum} className=\"clip\" src={this.props.src}></audio>\n      </button>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}